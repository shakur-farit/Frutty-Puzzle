//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCurrentTilesCountOnLevel;

    public static Entitas.IMatcher<GameEntity> CurrentTilesCountOnLevel {
        get {
            if (_matcherCurrentTilesCountOnLevel == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CurrentTilesCountOnLevel);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCurrentTilesCountOnLevel = matcher;
            }

            return _matcherCurrentTilesCountOnLevel;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Level.CurrentTilesCountOnLevel currentTilesCountOnLevel { get { return (Code.Gameplay.Features.Level.CurrentTilesCountOnLevel)GetComponent(GameComponentsLookup.CurrentTilesCountOnLevel); } }
    public int CurrentTilesCountOnLevel { get { return currentTilesCountOnLevel.Value; } }
    public bool hasCurrentTilesCountOnLevel { get { return HasComponent(GameComponentsLookup.CurrentTilesCountOnLevel); } }

    public GameEntity AddCurrentTilesCountOnLevel(int newValue) {
        var index = GameComponentsLookup.CurrentTilesCountOnLevel;
        var component = (Code.Gameplay.Features.Level.CurrentTilesCountOnLevel)CreateComponent(index, typeof(Code.Gameplay.Features.Level.CurrentTilesCountOnLevel));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCurrentTilesCountOnLevel(int newValue) {
        var index = GameComponentsLookup.CurrentTilesCountOnLevel;
        var component = (Code.Gameplay.Features.Level.CurrentTilesCountOnLevel)CreateComponent(index, typeof(Code.Gameplay.Features.Level.CurrentTilesCountOnLevel));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCurrentTilesCountOnLevel() {
        RemoveComponent(GameComponentsLookup.CurrentTilesCountOnLevel);
        return this;
    }
}
