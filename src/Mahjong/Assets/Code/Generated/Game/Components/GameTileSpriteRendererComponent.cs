//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTileSpriteRenderer;

    public static Entitas.IMatcher<GameEntity> TileSpriteRenderer {
        get {
            if (_matcherTileSpriteRenderer == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TileSpriteRenderer);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTileSpriteRenderer = matcher;
            }

            return _matcherTileSpriteRenderer;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Tile.TileSpriteRenderer tileSpriteRenderer { get { return (Code.Gameplay.Features.Tile.TileSpriteRenderer)GetComponent(GameComponentsLookup.TileSpriteRenderer); } }
    public UnityEngine.SpriteRenderer TileSpriteRenderer { get { return tileSpriteRenderer.Value; } }
    public bool hasTileSpriteRenderer { get { return HasComponent(GameComponentsLookup.TileSpriteRenderer); } }

    public GameEntity AddTileSpriteRenderer(UnityEngine.SpriteRenderer newValue) {
        var index = GameComponentsLookup.TileSpriteRenderer;
        var component = (Code.Gameplay.Features.Tile.TileSpriteRenderer)CreateComponent(index, typeof(Code.Gameplay.Features.Tile.TileSpriteRenderer));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceTileSpriteRenderer(UnityEngine.SpriteRenderer newValue) {
        var index = GameComponentsLookup.TileSpriteRenderer;
        var component = (Code.Gameplay.Features.Tile.TileSpriteRenderer)CreateComponent(index, typeof(Code.Gameplay.Features.Tile.TileSpriteRenderer));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveTileSpriteRenderer() {
        RemoveComponent(GameComponentsLookup.TileSpriteRenderer);
        return this;
    }
}
